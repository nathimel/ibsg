# Paths of files used for consuming and producing data


############################################################################
# Data to read in
############################################################################
# universe
universe_fn: data/universe/${game.universe}.csv
# prior
prior_fn: data/prior/${game.prior}.csv

############################################################################
# Outputs
############################################################################  

# Game (useful metadata)
game_fn: game.pkl # pickle binary

# Curves
curve_points_save_fn: curve_points.csv # (I[M:W], I[W:U], E[D_KL[M || M']])
mse_curve_points_save_fn: mse_curve_points.csv # (I[M:W], E[(u - u)^2])
optimal_encoders_save_fn: optimal_encoders.npy # the encoders P(W|M) from IB method
betas_save_fn: betas.npy # the actual beta values used in IB method
curve_metadata_save_fn: curve_config.yaml # will be a copy of the first hydra config instantiated by the sweep

# Simulation
# all fns below are for saving results from all runs
simulation_points_save_fn: simulation_points.csv # final point
trajectory_points_save_fn: trajectory_points.csv # all points
variant_points_save_fn: variant_points.csv
final_encoders_save_fn: final_encoders.npy # final encoders
nearest_optimal_points_save_fn: nearest_optimal_points.csv
nearest_optimal_save_fn: nearest_optimal_encoders.npy # most similar optimal encoders
approximated_encoders_save_fn: approximated_encoders.npy # distributions constructed via sampling of the final encoders
approximated_simulation_points_save_fn: approximated_simulation_points.csv # their corresponding points

# Plots
complexity_accuracy_plot_fn: complexity_accuracy.png
complexity_distortion_plot_fn: complexity_distortion.png
complexity_mse_plot_fn: complexity_mse.png
efficiency_plot_fn: efficiency.png
approximated_complexity_accuracy_plot_fn: approximated_complexity_accuracy.png
approximated_complexity_distortion_plot_fn: approximated_complexity_distortion.png
approximated_complexity_mse_plot_fn: approximated_complexity_mse.png
single_gnid_inspect_plot_fn: gnid_encoder_idx.png # In measure.py, we inspect and plot a single gNID plot

encoder_tile_plots_dir: encoder_tile_plots # tile plots per run
encoder_line_plots_dir: encoder_line_plots 
encoders_faceted_lines_plot_fn: encoders_faceted_lines.png # for all runs
encoders_faceted_tiles_plot_fn: encoders_faceted_tiles.png
approximated_encoders_faceted_lines_plot_fn: approximated_encoders_faceted_lines.png
approximated_encoders_faceted_tiles_plot_fn: approximated_encoders_faceted_tiles.png
nearest_optimal_faceted_lines_plot_fn: nearest_optimal_faceted_lines.png
nearest_optimal_faceted_tiles_plot_fn: nearest_optimal_faceted_tiles.png

############################################################################
# Hydra automatic folder naming
############################################################################

# holds curve points
curve_subdir: universe=${game.universe}/num_signals=${game.num_signals}/prior=${game.prior}/dist=${game.distance}/meaning_certainty=${game.meaning_dist_gamma}

# for plots etc. that summarize simulation sweeps
simulation_subdir:  ${filepaths.curve_subdir}/dynamics=${simulation.dynamics.name}/ii=${simulation.dynamics.imprecise_imitation_gamma}/discr_need=${game.discriminative_need_gamma}/population_init=${simulation.dynamics.population_init_gamma}/population_size=${simulation.dynamics.population_size}/num_runs=${simulation.num_runs}/seed=${seed} # note that population size is null in RD

# where the points corresponding to a single simulation will be saved
# simulation_subdir: ${filepaths.sim_sweep_subdir}

# where the current working directory will be when hydra is running
leaf_subdir: ${filepaths.simulation_subdir}

# hydra run root directory
hydra_run_root: outputs

# hydra multirun root directory
hydra_sweep_root: multirun